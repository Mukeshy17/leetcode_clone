[
  {
    "problemId": 1,
    "title": "Two Sum",
    "acceptanceRate": "60%",
    "difficulty": "Easy",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "examples": [
      {
        "input": [2, 7, 11, 15],
        "target": 9,
        "output": [0, 1],
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      }
    ]
  },
  {
    "problemId": 2,
    "title": "Add Two Numbers",
    "acceptanceRate": "75%",
    "difficulty": "Medium",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
    "examples": [
      {
        "input": [2, 4, 3],
        "output": [5, 6, 4],
        "explanation": "342 + 465 = 807"
      }
    ]
  },
  {
    "problemId": 3,
    "title": "Find Median from Data Stream",
    "acceptanceRate": "45%",
    "difficulty": "Hard",
    "description": "Design a data structure that supports the following two operations: `voproblemId addNum(int num)` and `double findMedian()`. The findMedian operation returns the median of all elements so far.",
    "examples": [
      {
        "input": [1, 3],
        "output": 2.0,
        "explanation": "The median is (1 + 3) / 2 = 2.0"
      }
    ]
  },
  {
    "problemId": 4,
    "title": "Longest Substring Without Repeating Characters",
    "acceptanceRate": "70%",
    "difficulty": "Medium",
    "description": "Given a string s, find the length of the longest substring without repeating characters.",
    "examples": [
      {
        "input": "abcabcbb",
        "output": 3,
        "explanation": "The longest substring without repeating characters is \"abc\", which has a length of 3."
      }
    ]
  },
  {
    "problemId": 5,
    "title": "Median of Two Sorted Arrays",
    "acceptanceRate": "55%",
    "difficulty": "Hard",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.",
    "examples": [
      {
        "input": {
          "nums1": [1, 3],
          "nums2": [2]
        },
        "output": 2.0,
        "explanation": "The median is (2 + 3) / 2 = 2.0"
      }
    ]
  },
  {
    "problemId": 6,
    "title": "Merge Two Sorted Lists",
    "acceptanceRate": "80%",
    "difficulty": "Easy",
    "description": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.",
    "examples": [
      {
        "input": {
          "l1": [1, 2, 4],
          "l2": [1, 3, 4]
        },
        "output": [1, 1, 2, 3, 4, 4],
        "explanation": "The merged sorted list is [1, 1, 2, 3, 4, 4]."
      }
    ]
  },
  {
    "problemId": 7,
    "title": "Longest Common Prefix",
    "acceptanceRate": "65%",
    "difficulty": "Easy",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.",
    "examples": [
      {
        "input": ["flower", "flow", "flight"],
        "output": "fl",
        "explanation": "The longest common prefix is \"fl\"."
      }
    ]
  },
  {
    "problemId": 8,
    "title": "Remove Nth Node From End of List",
    "acceptanceRate": "70%",
    "difficulty": "Medium",
    "description": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
    "examples": [
      {
        "input": {
          "head": [1, 2, 3, 4, 5],
          "n": 2
        },
        "output": [1, 2, 3, 5],
        "explanation": "The node with value 3 is the 2nd node from the end. After removal, the linked list becomes [1, 2, 3, 5]."
      }
    ]
  },
  {
    "problemId": 9,
    "title": "Search in Rotated Sorted Array",
    "acceptanceRate": "50%",
    "difficulty": "Medium",
    "description": "You are given an integer array nums sorted in ascending order, which is rotated at an unknown pivot point. Return the index of the target element if it is found in the array, or -1 if it is not in the array.",
    "examples": [
      {
        "input": {
          "nums": [4, 5, 6, 7, 0, 1, 2],
          "target": 0
        },
        "output": 4,
        "explanation": "The target element 0 is found at index 4."
      }
    ]
  },
  {
    "problemId": 10,
    "title": "Word Search",
    "acceptanceRate": "40%",
    "difficulty": "Medium",
    "description": "Given an m x n grproblemId of characters board and a string word, return true if word exists in the grproblemId.",
    "examples": [
      {
        "input": {
          "board": [
            ["A","B","C","E"],
            ["S","F","C","S"],
            ["A","D","E","E"]
          ],
          "word": "ABCCED"
        },
        "output": true,
        "explanation": "The word 'ABCCED' can be formed by following the path ['A','B','C','C','E','D'] in the grproblemId."
      }
    ]
  },
  {
    "problemId": 11,
    "title": "Jump Game",
    "acceptanceRate": "65%",
    "difficulty": "Medium",
    "description": "You are given an integer array nums. Each element represents the maximum jump length from that position. Determine if you can reach the last index.",
    "examples": [
      {
        "input": [2,3,1,1,4],
        "output": true,
        "explanation": "You can jump from index 0 to 1, then to the last index (4)."
      }
    ]
  },
  
  {
    "problemId": 12,
    "title": "Longest Increasing Subsequence",
    "acceptanceRate": "60%",
    "difficulty": "Medium",
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
    "examples": [
      {
        "input": [10,9,2,5,3,7,101,18],
        "output": 4,
        "explanation": "The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4."
      }
    ]
  },
  {
    "problemId": 13,
    "title": "Binary Tree Maximum Path Sum",
    "acceptanceRate": "45%",
    "difficulty": "Hard",
    "description": "Given a non-empty binary tree, find the maximum path sum. For this problem, a path is defined as any node sequence from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.",
    "examples": [
      {
        "input": {
          "root": {
            "val": 1,
            "left": {
              "val": 2
            },
            "right": {
              "val": 3
            }
          }
        },
        "output": 6,
        "explanation": "The maximum path sum is 2 + 1 + 3 = 6."
      }
    ]
  }
]